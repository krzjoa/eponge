usethis::use_package()
usethis::create_package()
usethis::create_package(path = ".")
getwd()
setwd("..")
usethis::create_package("sponge")
devtools::install()
devtools::install("sponge")
x <- function()"trolo"
sponge::erase_functions()
devtools::install("sponge")
sponge::erase_functions()
x <- function()"trolo"
z <- cars
q <- 2
sponge::erase_functions()
erase <- function(pattern = NULL, envir = globalenv()){
if (is.null(envir))
envir <- as.environment(-1L)
object.list <- if(!is.null(pattern)) ls(envir = envir, pattern = pattern) else ls(envir = envir)
object.list <- as.vector(unlist(object.list))
rm(list = object.list, envir = envir)
}
erase()
devtools::build_readme()
devtools::document()
devtools::build_site()
devtools::build_readme()
devtools::document()
devtools::build_site()
devtools::build_readme()
devtools::document()
devtools::build_site()
devtools::build_readme()
```r
filter <- function(x, id){
x %>%
filter(ID == id)
}
filter(cars, speed)
library(magrittr)
library(dplyr)
filter(cars, speed)
devtools::document()
devtools::build_readme()
devtools::build_site()
.abstract_erase_by_type <- function(filtering.function = NULL, list.function = ls, pattern = NULL,
envir = globalenv(), verbose = FALSE){
if (is.null(pattern))
objects <- list.function(envir = envir)
else
objects <- list.function(envir = envir, pattern = pattern)
if (!is.null(filtering.function))
objects <- Filter(filtering.function, objects)
if (verbose)
print(sprintf("Removed objects: %s", paste(objects, collapse = ", ")))
rm(list = objects, envir = envir)
}
trollo <- function(x) x + 2
.abstract_erase_by_type <- function(filtering.function = NULL, list.function = ls, pattern = NULL,
envir = globalenv(), verbose = FALSE){
if (is.null(pattern))
objects <- list.function(envir = envir)
else
objects <- list.function(envir = envir, pattern = pattern)
if (!is.null(filtering.function))
objects <- Filter(filtering.function, objects)
if (verbose)
print(sprintf("Removed objects: %s", paste(objects, collapse = ", ")))
rm(list = objects, envir = envir)
}
#' @param envir environment; default: global environment
#' @param verbose print removed objects' names
#' @examples
#' create_data <- function() data.frame(a = 1:10, b = 11:20)
#' x <- cars
#' y <- 1:20
#' z <- function(x) x +2
#' erase_functions()
#' ls()
#' @export
erase_functions <- function(pattern = NULL, envir = globalenv(), verbose = FALSE){
.abstract_erase_by_type(list.function = lsf.str, envir = envir, verbose = verbose)
}
erase_functions()
devtools::install()
devtools::install()
trollo <- function(x) x + 2
sponge::erase_functions()
crs <- cars
lol <- 2
lollo <- "qwert"
devtools::install()
trollo <- 5
lollo <- "qwert"
crs <- cars
sponge::erase_if(is.character)
sponge::erase_df()
#' create_data <- function() data.frame(a = 1:10, b = 11:20)
#' x <- cars
#' y <- 1:20
#' z <- function(x) x +2
#' l <- list(1,2,3,4)
#' erase_if(is.list)
#' ls()
#' # You may use lambda expression
#' erase_if(~ is.function(.x) | is.data.frame(.x))
#' @export
erase_if <- function(condition, pattern = NULL, envir = globalenv(), verbose = FALSE){
condition <- rlang::as_function(condition)
filtering_function <- function(x){
condition(get(x, envir = envir))
}
.abstract_erase_by_type(filtering.function = filtering_function,
list.function = ls, envir = envir, verbose = verbose)
}
erase_if(~ .x == 4)
.abstract_erase_by_type <- function(filtering.function = NULL, list.function = ls, pattern = NULL,
envir = globalenv(), verbose = FALSE){
if (is.null(pattern))
objects <- list.function(envir = envir)
else
objects <- list.function(envir = envir, pattern = pattern)
if (!is.null(filtering.function))
objects <- Filter(filtering.function, objects)
if (verbose)
print(sprintf("Removed objects: %s", paste(objects, collapse = ", ")))
rm(list = objects, envir = envir)
}
.abstract_erase_by_type <- function(filtering.function = NULL, list.function = ls, pattern = NULL,
envir = globalenv(), verbose = FALSE){
if (is.null(pattern))
objects <- list.function(envir = envir)
else
objects <- list.function(envir = envir, pattern = pattern)
if (!is.null(filtering.function))
objects <- Filter(filtering.function, objects)
if (verbose)
print(sprintf("Removed objects: %s", paste(objects, collapse = ", ")))
rm(list = objects, envir = envir)
}
erase_if(~ .x == 4)
erase_if == 4
erase_if(~ if (is.numeric(.x)) .x == 4 else FALSE)
erase_if(~ if (is.numeric(.x)) .x == 5 else FALSE)
devtools::document()
devtools::build_site()
usethis::use_testthat()
usethis::use_test()
usethis::use_test()
setwd("~/Pulpit/sponge")
usethis::use_test()
?usethis::use_test()
?usethis::use_test("test-erase")
library(testthat)
envir <- environment()
View(envir)
devtools::test()
test_that("Erase by name", {
alpha.value <- 1
alpha_function <-function(x) x + 2
alpha.data.frame <- data.frame(a = 1:5, b = 6:10)
beta.value <- 7
beta_function <- function(x) x**2
beta.data.frame <- data.frame(a = 6:10, b = 1:5)
envir <- environment()
erase("alpha", envir = envir)
object.list <- c("beta.value", "beta_function", "beta.data.frame")
print(object.list)
expect_equal(ls(envir = envir), object.list)
})
test_that("Erase by name", {
alpha.value <- 1
alpha_function <-function(x) x + 2
alpha.data.frame <- data.frame(a = 1:5, b = 6:10)
beta.value <- 7
beta_function <- function(x) x**2
beta.data.frame <- data.frame(a = 6:10, b = 1:5)
envir <- environment()
erase("alpha", envir = envir)
object.list <- c("beta.value", "beta_function", "beta.data.frame")
print(ls(envir = envir))
expect_equal(ls(envir = envir), object.list)
})
test_that("Erase by name", {
alpha.value <- 1
alpha_function <-function(x) x + 2
alpha.data.frame <- data.frame(a = 1:5, b = 6:10)
beta.value <- 7
beta_function <- function(x) x**2
beta.data.frame <- data.frame(a = 6:10, b = 1:5)
envir <- environment()
erase(pattern = "alpha", envir = envir)
object.list <- c("beta.value", "beta_function", "beta.data.frame")
print(ls(envir = envir))
expect_equal(ls(envir = envir), object.list)
})
alpha.value <- 1
alpha_function <-function(x) x + 2
alpha.data.frame <- data.frame(a = 1:5, b = 6:10)
beta.value <- 7
beta_function <- function(x) x**2
beta.data.frame <- data.frame(a = 6:10, b = 1:5)
sponge::erase("alpha")
test_that("Erase by name", {
alpha.value <- 1
alpha_function <-function(x) x + 2
alpha.data.frame <- data.frame(a = 1:5, b = 6:10)
beta.value <- 7
beta_function <- function(x) x**2
beta.data.frame <- data.frame(a = 6:10, b = 1:5)
envir <- environment()
erase(pattern = "alpha", envir = envir)
object.list <- c("beta.value", "beta_function", "beta.data.frame")
print(ls(envir = envir))
expect_equal(ls(envir = envir), object.list)
})
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
usethis::use_travis()
usethis::use_appveyor()
usethis::use_travis_badge()
usethis::use_appveyor_badge()
devtools::build_readme()
